---
# Création des répertoires
- name: Créer les répertoires nécessaires
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ prometheus_dir }}"
 
# Vérification des ports
- name: Vérifier la disponibilité des ports
  shell: netstat -tuln | grep ":{{ item }}" || true
  register: port_check
  failed_when: port_check.stdout != ""
  changed_when: false
  loop:
    - "{{ containers.prometheus.port }}"
    - "{{ containers.grafana.port }}"
 
# Nettoyage des conteneurs existants
- name: Supprimer les conteneurs existants
  shell: docker rm -f {{ item.name }} || true
  ignore_errors: yes
  loop:
    - "{{ containers.prometheus }}"
    - "{{ containers.grafana }}"
 
# Déploiement des conteneurs
- name: Démarrer le conteneur Prometheus
  docker_container:
    name: "{{ containers.prometheus.name }}"
    image: "{{ containers.prometheus.image }}"
    state: started
    ports:
      - "{{ containers.prometheus.port }}:{{ containers.prometheus.port }}"
    volumes:
      - "{{ prometheus_dir }}:/etc/prometheus"
    env:
      TZ: UTC
    restart_policy: unless-stopped
 
- name: Créer le répertoire pour Grafana
  file:
    path: /opt/grafana
    state: directory
    mode: '0755'

- name: Vérifier si le port 3000 est libre (Grafana)
  shell: netstat -tuln | grep ":3000" || true
  register: grafana_port_check
  failed_when: grafana_port_check.stdout != ""
  changed_when: false

- name: Supprimer le conteneur Grafana existant (s'il existe)
  shell: >
    docker ps -a -q -f name=grafana_server | grep -q . && docker rm -f grafana_server || true
  ignore_errors: yes

- name: Démarrer le conteneur Grafana
  shell: >
    docker run -d --name=grafana_server
    -p 3000:3000
    grafana/grafana
  register: grafana_docker_run
  failed_when: grafana_docker_run.rc != 0

- name: Afficher les erreurs de démarrage du conteneur Grafana en cas d'échec
  debug:
    var: grafana_docker_run.stderr
  when: grafana_docker_run.rc != 0

 
# Configuration Prometheus
- name: Configurer Prometheus
  copy:
    dest: "{{ prometheus_dir }}/prometheus.yml"
    content: |
      global:
        scrape_interval: 15s
 
      scrape_configs:
        - job_name: 'flask_api'
          metrics_path: '/metrics'
          static_configs:
            - targets: ['127.0.0.1:5001']
    mode: '0644'
  notify: Restart Prometheus